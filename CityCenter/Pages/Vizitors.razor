@page "/visitors"
@inject NavigationManager Navigation
@using CityCenter.Data
@using CityCenter.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject IJSRuntime JS
@implements IAsyncDisposable
@using System.Text.RegularExpressions;
@inject ThemeService ThemeService

<!DOCTYPE html>
<html lang="ru" class="@(ThemeService.IsLightTheme ? "light-theme" : "dark-theme")">
<head>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Торговый Центр</title>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <style>
        /* Добавьте в ваш CSS */
        #mall-map-section {
            margin-bottom: 40px; /* Отступ после всей секции с картой */
        }
        .floor-selector {
            font-size: 1.3rem;
            padding: 10px 20px;
            margin-bottom: 20px;
            border-radius: 10px;
            background-color: #fff;
            color: #333;
            box-shadow: 0 0 10px rgba(0, 120, 215, 0.5);
            border: 1px solid #ddd;
        }
        /* Основные стили светлой темы */
        .light-theme {
            background: linear-gradient(135deg, #f0f0f0, #e0e0e0) !important;
            color: #333 !important;
        }

            .light-theme body {
                background: linear-gradient(135deg, #f0f0f0, #e0e0e0) !important;
                color: #333 !important;
            }

            /* Сайдбар */
            .light-theme .sidebar {
                background: rgba(255, 255, 255, 0.9) !important;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1) !important;
            }

                .light-theme .sidebar ul li {
                    color: #333 !important;
                }

                    .light-theme .sidebar ul li:hover {
                        background: rgba(0, 0, 0, 0.1) !important;
                    }

            /* Блоки контента */
            .light-theme .block {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(240, 240, 240, 0.8)) !important;
                color: #333 !important;
                box-shadow: 0 0 12px rgba(0, 0, 0, 0.1) !important;
            }

                .light-theme .block:hover {
                    background: linear-gradient(135deg, rgba(255, 255, 255, 0.8), rgba(220, 240, 255, 0.7)) !important;
                    box-shadow: 0 0 20px rgba(0, 120, 215, 0.3) !important;
                }

            /* Панель поиска */
            .light-theme .search-panel {
                background: rgba(255, 255, 255, 0.95) !important;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1) !important;
            }

                .light-theme .search-panel input {
                    background: #f0f0f0 !important;
                    color: #333 !important;
                    border: 1px solid #ddd !important;
                }

            /* Кнопки */
            .light-theme button {
                color: white !important; /* Сохраняем цвет текста белым для контраста */
            }

            /* Карта ТЦ */
            .light-theme .svg-container {
                background-color: #f8f8f8 !important;
            }

            /* Информация о помещении */
            .light-theme .room-info {
                background: linear-gradient(135deg, rgba(240, 240, 240, 0.95), rgba(230, 230, 230, 0.95)) !important;
                color: #333 !important;
                box-shadow: 0 0 40px rgba(0, 120, 215, 0.3) !important;
            }

                .light-theme .room-info b {
                    color: #0078d7 !important;
                }

            /* Подвал */
            .light-theme .footer {
                background: #e0e0e0 !important;
                color: #555 !important;
                border-top: 2px solid #ccc !important;
            }

            .light-theme .footer-section h3 {
                color: #0078d7 !important;
            }

            .light-theme .vk-link {
                color: #555 !important;
            }

                .light-theme .vk-link:hover {
                    color: #333 !important;
                }

            /* Формы входа */
            .light-theme .login-box {
                background: linear-gradient(135deg, rgba(240, 240, 240, 0.95), rgba(230, 230, 230, 0.95)) !important;
                color: #333 !important;
                box-shadow: 0 0 40px rgba(0, 0, 0, 0.1) !important;
            }

            .light-theme .login-input {
                background-color: #f0f0f0 !important;
                color: #333 !important;
                border: 1px solid #ddd !important;
            }

                .light-theme .login-input:focus {
                    box-shadow: 0 0 10px rgba(0, 120, 215, 0.5) !important;
                }

            .light-theme .back-button.inside {
                color: #666 !important;
            }

                .light-theme .back-button.inside:hover {
                    color: #333 !important;
                }

            .light-theme .login-link {
                color: #666 !important;
            }

                .light-theme .login-link:hover {
                    color: #333 !important;
                }

            /* Элементы управления картой */
            .light-theme .floor-controls button {
                background-color: #0078d7 !important;
            }

                .light-theme .floor-controls button:hover {
                    background-color: #005a9e !important;
                }

            .light-theme .floor-selector {
                background-color: #fff !important;
                color: #333 !important;
                box-shadow: 0 0 10px rgba(0, 120, 215, 0.5) !important;
                border: 1px solid #ddd !important;
            }
            /* Специфические элементы для арендованных/неарендованных помещений */
            .light-theme g.rented:hover rect {
                fill: rgba(0, 120, 215, 0.15) !important;
                stroke: #0078d7 !important;
            }

            .light-theme svg g[id^="Store-"]:hover {
                filter: drop-shadow(0 0 6px #0078d7) !important;
            }

                .light-theme svg g[id^="Store-"]:hover rect {
                    fill: rgba(0, 120, 215, 0.15) !important;
                    stroke: #0078d7 !important;
                }

            .light-theme svg .selected {
                fill: #00a2b1 !important;
                stroke: #008a96 !important;
                filter: drop-shadow(0 0 10px #00a2b1) !important;
            }

            /* Адаптация для элементов с прозрачностью */
            .light-theme .not-rented {
                opacity: 0.4 !important;
                filter: grayscale(1) brightness(1.2) !important;
            }

            /* Заголовки */
            .light-theme .welcome-text {
                color: #333 !important;
                text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.2) !important;
            }

            /* Скролл вниз */
            .light-theme .scroll-down {
                color: #0078d7 !important;
            }

        /* Скрываем все группы с иконками по умолчанию */
        g[id^="Store-"] g[id^="body"],
        g[id^="Store-"] g[id^="close"],
        g[id^="Store-"] [id^="Vector_"] {
            display: none;
            opacity: 0;
            pointer-events: none;
        }

        /* Показываем иконки только для арендованных помещений */
        g.rented g[id^="body"],
        g.rented g[id^="close"],
        g.rented [id^="Vector_"] {
            display: block !important;
            opacity: 1 !important;
            pointer-events: none !important;
        }

        /* Стили для помещений */
        .rented {
            cursor: pointer;
            fill: #yourRentedColor;
        }

            .rented:hover rect {
                fill: rgba(0, 170, 255, 0.15) !important;
                stroke: #00aaff !important;
            }

        .not-rented {
            fill: #yourNotRentedColor;
            opacity: 0.25;
            filter: grayscale(1);
            pointer-events: none;
            cursor: not-allowed;
        }

            /* Скрываем иконки для неарендованных */
            .not-rented g[id^="body"],
            .not-rented g[id^="close"],
            .not-rented [id^="Vector_"] {
                display: none !important;
            }
        /* Стили для помещений */
        g.rented {
            cursor: pointer;
        }

            g.rented:hover rect {
                fill: rgba(0, 170, 255, 0.15) !important;
                stroke: #00aaff !important;
            }

        g.not-rented {
            opacity: 0.25;
            filter: grayscale(1);
            pointer-events: none;
            cursor: not-allowed;
        }
        .search-panel {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: rgba(10, 10, 10, 0.95);
            padding: 20px 30px;
            display: flex;
            justify-content: center;
            gap: 15px;
            z-index: 1001;
            box-shadow: 0 4px 10px rgba(0,0,0,0.8);
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

            .search-panel input {
                width: 40%;
                padding: 14px 20px;
                border: none;
                border-radius: 10px;
                font-size: 1.1rem;
                background: #1e1e1e;
                color: white;
            }

            .search-panel button {
                padding: 14px 26px;
                background-color: #00aaff;
                color: white;
                font-size: 1.1rem;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .search-panel button:hover {
                    background-color: #0077aa;
                }

        * {
            box-sizing: border-box;
        }



        .floor-map {
            display: none;
        }

            .floor-map:not(.hidden) {
                display: block;
            }

        body {
            background: linear-gradient(135deg, #f0f0f0, #e0e0e0);
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            min-height: 100vh; /* Добавь вместо неё, чтобы сохранялась минимальная высота */
            overflow-x: hidden;
            margin: 0;
            padding: 0;
            font-family: 'Poppins', sans-serif;
            background-size: cover;
        }

        .dark-theme body {
            background: linear-gradient(135deg, #0a0a0a, #1e1e1e);
            color: #fff;
        }

        .dark-theme .block {
            background: linear-gradient(135deg, rgba(0, 0, 0, 1), rgba(40, 40, 40, 0.6));
            color: white;
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.8);
        }

            .dark-theme .block:hover {
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 100, 150, 0.4));
                box-shadow: 0 0 20px #00aaff;
            }

        .dark-theme .floor-selector {
            background-color: #1e1e1e;
            color: white;
            box-shadow: 0 0 10px #00aaff;
            border: none;
        }
        .hidden {
            display: none !important;
        }


        .welcome-text {
            position: relative; /* Вместо absolute */
            top: auto;
            font-size: 3rem;
            font-weight: bold;
            text-shadow: 4px 4px 10px rgba(0, 0, 0, 0.7);
            max-width: 80%;
            margin-bottom: 30px; /* Добавляем отступ, чтобы текст не сливался с блоками */
        }

        .content {
            display: flex;
            justify-content: center; /* Центрирование блоков */
            flex-wrap: wrap; /* Чтобы блоки красиво располагались на маленьких экранах */
            gap: 20px;
            width: 100%;
            max-width: 2000px;
            padding: 20px;
        }


        .block {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(240, 240, 240, 0.8));
            color: #333;
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            font-size: 1.6rem;
            font-weight: 600;
            width: 22%;
            min-width: 200px;
            box-sizing: border-box;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
        }

            .block:hover {
                transform: scale(1.05);
                box-shadow: 0 0 20px #00aaff;
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 100, 150, 0.4));
            }



        /* Светлая тема (по умолчанию) */
        .sidebar {
            width: 80px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.9); /* Белый с прозрачностью */
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1); /* Более светлая тень */
            position: fixed;
            left: 0;
            top: 0;
            transition: width 0.3s ease, background 0.3s ease;
            overflow: hidden;
            padding-top: 80px;
        }

            .sidebar ul li {
                color: #333; /* Темный текст для светлой темы */
            }

                .sidebar ul li:hover {
                    background: rgba(0, 0, 0, 0.1); /* Светлый hover */
                }

        /* Темная тема */
        .dark-theme .sidebar {
            background: rgba(0, 0, 0, 0.8); /* Темный фон */
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.8); /* Более темная тень */
        }

            .dark-theme .sidebar ul li {
                color: white; /* Белый текст для темной темы */
            }

                .dark-theme .sidebar ul li:hover {
                    background: rgba(255, 255, 255, 0.2); /* Темный hover */
                }

        .map-container {
            margin: 20px auto; /* Центрирование по горизонтали */
            width: 100%;
            max-width: 800px; /* Ограничение максимальной ширины */
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: visible;
        }

            .map-container svg {
                width: 100%;
                height: auto;
                max-width: 100%; /* Чтобы не выходила за границы */
            }


        .svg-container svg {
            width: 100vw;
            height: 80vh;
        }



        .room-info {
            background: linear-gradient(135deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
            padding: 50px;
            border-radius: 25px;
            box-shadow: 0 0 40px rgba(0, 170, 255, 0.6);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            font-size: 1.4rem;
            color: #fff;
            max-width: 900px;
            width: 100%;
            margin: 0 auto;
        }

            .room-info:hover {
                transform: scale(1.03);
                box-shadow: 0 0 50px #00aaff;
            }

            .room-info b {
                color: #00ffcc;
            }

        .btn {
            margin-top: 30px;
            padding: 14px 26px;
            background-color: #00aaff;
            border: none;
            border-radius: 12px;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            transition: background 0.3s ease;
        }

            .btn:hover {
                background-color: #0088cc;
            }

        /* Подсветка выбранного помещения */
        svg .selected {
            fill: #00ff88 !important;
            stroke: #00cc77 !important;
            filter: drop-shadow(0 0 10px #00ff88);
        }

        /* Подсветка при наведении без сдвига и масштабирования */
        svg g[id^="Store-"]:hover {
            cursor: pointer;
            transition: filter 0.2s ease;
            filter: drop-shadow(0 0 6px #00aaff);
        }

            svg g[id^="Store-"]:hover rect {
                fill: rgba(0, 170, 255, 0.15) !important;
                stroke: #00aaff !important;
                transition: all 0.3s ease;
            }


        .svg-disabled {
            opacity: 0.25;
            pointer-events: none;
            cursor: not-allowed;
            filter: grayscale(1);
        }

        svg g.svg-disabled:hover {
            transform: none !important;
            filter: none !important;
            cursor: not-allowed !important;
        }

      
        svg g[id^="Store-"]:not(.svg-disabled) {
            cursor: pointer;
        }
    

        .screen {
            padding-top: 80px; /* или больше, если нужно */
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start; /* было center — это центрировало всё по вертикали */
            padding-left: 100px;
            padding-right: 40px;
            box-sizing: border-box;
        }


        .scroll-down {
            margin-top: 40px;
            cursor: pointer;
            animation: bounce 2s infinite;
            font-size: 2.5rem;
            color: #00aaff;
        }

        .footer {
            background: #111;
            color: #ccc;
            padding: 40px 20px;
            width: 100%;
            border-top: 2px solid #333;
        }

        .footer-content {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            justify-content: space-between;
        }

        .footer-section {
            flex: 1 1 250px;
        }

            .footer-section h3 {
                color: #00aaff;
                margin-bottom: 10px;
                font-size: 1.5rem;
            }

            .footer-section p {
                margin: 5px 0;
                font-size: 1.1rem;
            }

        .vk-link {
            color: #ccc;
            text-decoration: none;
            font-size: 1.1rem;
        }

            .vk-link i {
                color: #4c75a3;
                margin-right: 8px;
                font-size: 1.2rem;
            }

            .vk-link:hover {
                color: #fff;
            }

        .floor-label {
            font-size: 24px;
            margin-bottom: 10px;
        }

        .map-controls {
            margin-bottom: 15px;
        }

            .map-controls button {
                margin: 0 10px;
                padding: 6px 12px;
                font-size: 16px;
            }

        h2 {
            margin-bottom: -4vh; /* или больше, если нужно */
            z-index: 2;
            position: relative;
        }

    </style>
   
</head>
<body class="@(ThemeService.IsLightTheme ? "light-theme" : "")">

  

    <div id="home" class="screen">
        <div class="welcome-text">Добро пожаловать в Сити Центр</div>

        <div class="content">
            <div class="block" @onclick="NavigateToShops">
                <span>Магазины</span>
            </div>
            <div class="block" @onclick="NavigateToFood">
                <span>Кафе и рестораны</span>
            </div>
            <div class="block" @onclick="NavigateToServices">
                <span>Сервисы и услуги</span>
            </div>
        </div>
        <!-- Стрелка вниз -->
        <div class="scroll-down" @onclick="ScrollToMap">
            <i class="fas fa-chevron-down"></i>
        </div>



        <div id="mall-map-section">
            <h2 id="mall-map" style="text-align: center; margin-top: 80px; margin-bottom: 20px;">Карта ТЦ</h2>
            <select @onchange="OnFloorChanged" class="floor-selector" style="margin-bottom: 20px;">
                <option value="1">1 этаж</option>
                <option value="2">2 этаж</option>
                <option value="3">3 этаж</option>
                <option value="4">4 этаж</option>
            </select>
            <div class="svg-container">
                @((MarkupString)SvgContent)
            </div>
        </div>

      

      

    </div>

  

</body>
<footer class="footer">
    <div class="footer-content">
        <div class="footer-section">
            <h3>График работы</h3>
            <p>Пн-Пт с 10:00 - 21:00</p>
            <p>Сб-Вс с 10:00 - 20:00</p>
        </div>
        <div class="footer-section">
            <h3>Контакты</h3>
            <p>Телефон: +7 (343) 350-16-42</p>
            <p>
                <a href="https://vk.com/tkcitycenter" target="_blank" class="vk-link">
                    <i class="fab fa-vk" style="color: #1471b8;"</i> Мы ВКонтакте
                </a>
            </p>
        </div>
        <div class="footer-section">
            <h3>Мы на карте</h3>
            <iframe src="https://yandex.ru/map-widget/v1/?um=constructor%3Add899fd962263cd1eab940908e9aca477fca3498c3eaa82faa2b1151666dd29c&amp;source=constructor" width="400" height="150" frameborder="0"></iframe>
        </div>
    </div>
</footer>

</html>
<script>



    function scrollToMap() {
        const map = document.getElementById('mall-map');
        if (map) {
            map.scrollIntoView({ behavior: 'smooth' });
        }
    }
    function scrollToMap() {
        const map = document.getElementById('mall-map');
        if (map) {
            map.scrollIntoView({ behavior: 'smooth' });
        }
    }

    document.addEventListener('click', function (event) {
        const panel = document.getElementById('search-panel');
        if (!panel.contains(event.target) && !event.target.closest('.sidebar')) {
            panel.classList.add('hidden');
        }
    });
    // В скриптах
    document.addEventListener('scroll', handler, { passive: true });

</script>
@code {
    private int currentIndex = 0;
    private DotNetObjectReference<Vizitors>? dotNetRef;

    private string SvgContent = "";
    private Dictionary<string, Помещения> Доступные = new();
    private Помещения? SelectedRoom;
    private ElementReference RoomInfoRef;

    private List<string> floors = new() { "Этаж 1", "Этаж 2", "Этаж 3", "Этаж 4" };


    private void ToggleSearchPanel()
    {
        JS.InvokeVoidAsync("toggleSearchPanel");
    }
    private int SelectedFloor = 1;

    private async Task OnFloorChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int floor))
        {
            SelectedFloor = floor;
            await LoadSvgForFloor(SelectedFloor);
            StateHasChanged(); // если нужно явно перерисовать
        }
    }

    [JSInvokable]
    public async Task SetSelectedRoom(string id)
    {
        if (Доступные.TryGetValue(id, out var room))
        {
            SelectedRoom = room;
            StateHasChanged();
            await Task.Delay(300);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef?.Dispose();
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("mapRent.setupClickHandler", dotNetRef);
        }
    }



    private int currentFloor = 4;
    private async Task LoadSvgForFloor(int floor)
    {
        SelectedRoom = null;
        string path = $"wwwroot/images/Frame{floor}.svg";
        SvgContent = await File.ReadAllTextAsync(path);

        var всеПомещения = await Db.Помещенияs.ToListAsync();
        var svgIds = Regex.Matches(SvgContent, @"id=""(Store-[\w-]+)""")
                     .Select(m => m.Groups[1].Value)
                     .Distinct()
                     .ToList();

        foreach (var id in svgIds)
        {
            var помещение = всеПомещения.FirstOrDefault(p => p.Расположение == id);

            // Паттерн для поиска групп с иконками (body X, close X и т.д.)
            var iconPattern = $@"<g[^>]+id=""{id}""[^>]*>.*?<g\s+id=""(body|close)[^""]*"".*?</g>";

            if (помещение != null && !помещение.ДоступноДляАренды)
            {
                // Арендованные помещения
                string fullUrl = GetFullUrl(помещение.СсылкаНаМагазин);

                if (fullUrl != "0") // Только если есть корректная ссылка
                {
                    SvgContent = Regex.Replace(
                        SvgContent,
                        $@"(<g[^>]*id=""{id}""[^>]*)",
                        $"$1 class=\"rented\" onclick=\"window.open('{fullUrl}', '_blank')\"",
                        RegexOptions.IgnoreCase);
                }
                else
                {
                    SvgContent = Regex.Replace(
                        SvgContent,
                        $@"(<g[^>]*id=""{id}""[^>]*)",
                        "$1 class=\"rented\"",
                        RegexOptions.IgnoreCase);
                }

                // Иконка остаётся
            }
            else
            {
                // Свободные помещения — удаляем группу с иконкой
                SvgContent = Regex.Replace(
                    SvgContent,
                    iconPattern,
                    match =>
                    {
                        var storeGroup = match.Value;
                        return storeGroup.Replace(match.Groups[1].Value, ""); // Удаляем иконку
                    },
                    RegexOptions.Singleline | RegexOptions.IgnoreCase);

                SvgContent = Regex.Replace(
                    SvgContent,
                    $@"(<g[^>]*id=""{id}""[^>]*)",
                    "$1 class=\"not-rented\"",
                    RegexOptions.IgnoreCase);
            }
        }

        StateHasChanged();
    }

    private async Task ScrollToMap()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToMap");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка прокрутки: {ex.Message}");
        }
    }

    private string GetFullUrl(string? url)
    {
        url = url?.Trim(); // Убираем пробелы в начале и конце

        if (string.IsNullOrWhiteSpace(url))
            return "0"; // Ничего не делать

        // Удаляем возможные протоколы и слеши в начале
        url = Regex.Replace(url, "^https?://", "", RegexOptions.IgnoreCase);
        url = url.TrimStart('/');

        // Если URL не содержит точку (значит это не домен), возвращаем "0"
        if (!url.Contains('.'))
            return "0";

        return $"https://{url}";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSvgForFloor(currentIndex + 1);
    }
    public async ValueTask DisposeAsync()
    {
        dotNetRef?.Dispose();
    }

    // Переход на страницу для бизнеса (например, авторизация)
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void NavigateToReg()
    {
        Navigation.NavigateTo("/registration");
    }

    private void NavigateToShops()
    {
        Navigation.NavigateTo("/shops");
    }

    private void NavigateToServices()
    {
        Navigation.NavigateTo("/services");
    }

    private void NavigateToFood()
    {
        Navigation.NavigateTo("/food");
    }
}