@page "/add-room"
@using CityCenter.Data
@using Microsoft.EntityFrameworkCore
@using CityCenter.Models
@inject AppDbContext Db
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions;

@inject ThemeService ThemeService
<!DOCTYPE html>
<html lang="ru" class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<head>
<style>
     
    /* Общие стили */
    .back-arrow {
        position: absolute;
        top: 30px;
        left: 30px;
        font-size: 2rem;
        cursor: pointer;
        color: #00aaff;
        transition: transform 0.2s ease;
        z-index: 10;
    }

        .back-arrow:hover {
            transform: scale(1.2);
            color: #0088cc;
        }

    /* Подсветка выбранного помещения */
    svg .selected {
        fill: #00ff88 !important;
        stroke: #00cc77 !important;
        filter: drop-shadow(0 0 10px #00ff88);
    }

    /* Подсветка при наведении */
    svg g[id^="Store-"]:hover {
        cursor: pointer;
        transition: filter 0.2s ease;
        filter: drop-shadow(0 0 6px #00aaff);
    }

        svg g[id^="Store-"]:hover rect {
            fill: rgba(0, 170, 255, 0.15) !important;
            stroke: #00aaff !important;
            transition: all 0.3s ease;
        }

    .svg-disabled {
        opacity: 0.25;
        pointer-events: none;
        cursor: not-allowed;
        filter: grayscale(1);
    }

    svg g.svg-disabled:hover {
        transform: none !important;
        filter: none !important;
        cursor: not-allowed !important;
    }

    svg [id^="Vector"],
    svg [id^="Vector_"],
    svg [id^="icon"],
    svg .icon {
        display: none !important;
    }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #0a0a0a, #111) fixed; /* Добавлено fixed */
            color: white;
            margin: 0;
            padding: 40px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            box-sizing: border-box; /* Важно! */
        }


    h1 {
        margin-bottom: 30px;
    }

    .map-wrapper {
        max-width: 100%;
        overflow-x: auto;
        background-color: #222;
        padding: 20px;
        border-radius: 20px;
    }

    .btn {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #00aaff;
        border: none;
        border-radius: 10px;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .btn:hover {
            background-color: #0088cc;
        }

    .info {
        margin-top: 30px;
        background: rgba(255, 255, 255, 0.1);
        padding: 20px;
        border-radius: 10px;
        max-width: 600px;
        text-align: center;
    }

    .form {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 600;
        }

        .form-group input,
        .form-group select {
            padding: 8px 10px;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
            width: 100%;
            max-width: 300px;
        }

    input[type="date"] {
        background-color: #f0f0f0;
    }

    .floor-selector {
        padding: 10px 15px;
        font-size: 1.1rem;
        border-radius: 10px;
        border: 2px solid #00aaff;
        background-color: #111;
        color: #fff;
        margin-bottom: 20px;
        max-width: 250px;
        width: 100%;
        text-align: center;
        font-weight: 600;
    }

        .floor-selector:focus {
            outline: none;
            border-color: #00ff88;
        }

    /* Светлая тема */

        .light-theme {
            background: linear-gradient(135deg, #f5f5f5, #e0e0e0) !important;
        }
        .light-theme .map-wrapper {
            background-color: #fff; /* или любой другой светлый цвет */
        }

        body.light-theme {
            background: linear-gradient(135deg, #f5f5f5, #e0e0e0) fixed;
            color: #333;
        }

    .light-theme .back-arrow {
        color: #0078d7;
    }

        .light-theme .back-arrow:hover {
            color: #005fa3;
        }

    .light-theme .map-wrapper {
        background-color: #fff;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    .light-theme .btn {
        background-color: #0078d7;
        color: white;
    }

        .light-theme .btn:hover {
            background-color: #0066cc;
        }

    .light-theme .info {
        background: rgba(0, 0, 0, 0.05);
        color: #333;
    }

    .light-theme .form-group input,
    .light-theme .form-group select {
        background-color: #fff;
        color: #333;
        border: 1px solid #ddd;
    }

    .light-theme .floor-selector {
        background-color: #fff;
        color: #333;
        border: 2px solid #0078d7;
    }

        .light-theme .floor-selector:focus {
            border-color: #00a859;
        }

    /* Адаптация SVG для светлой темы */
    .light-theme svg .selected {
        fill: #00a859 !important;
        stroke: #008744 !important;
        filter: drop-shadow(0 0 10px #00a859);
    }

    .light-theme svg g[id^="Store-"]:hover rect {
        fill: rgba(0, 120, 215, 0.15) !important;
        stroke: #0078d7 !important;
    }
</style>
</head>
<body class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<div style="display: flex; flex-direction: column; align-items: center;">
    <div class="back-arrow" @onclick="GoBack">←</div>
    <h2>Добавление помещения</h2>
    <h2 class="map-title">Выберите помещение на карте</h2>
    <select @onchange="OnFloorChanged" class="floor-selector">
        <option value="1">1 этаж</option>
        <option value="2">2 этаж</option>
        <option value="3">3 этаж</option>
        <option value="4">4 этаж</option>
    </select>
</div>
<div class="map-wrapper">
    @if (!string.IsNullOrWhiteSpace(SvgContent))
    {
        <div class="svg-container">
            @((MarkupString)SvgContent)
        </div>
    }
</div>

@if (SelectedRoom != null)
{
    <div class="room-info">
        <h3>Вы выбрали помещение: <span>@selectedRoomId</span></h3>



        <form class="form" @onsubmit="HandleFormSubmit">
            <div class="form-group">
                <label>Название помещения:</label>
                <input type="text" @bind="RoomName" required />
            </div>

            <div class="form-group">
                <label>Площадь (м²):</label>
                <input type="number" step="0.01" @bind="Area" required />
            </div>

            <div class="form-group">
                <label>Стоимость аренды (₽):</label>
                <input type="number" step="0.01" @bind="RentPrice" required />
            </div>

            <div class="form-group">
                <label>Назначение:</label>
                <select @bind="SelectedPurposeId">
                    @if (Purposes != null)
                    {
                        @foreach (var purpose in Purposes)
                        {
                            <option value="@purpose.IdНазначения">@purpose.Название</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Описание:</label>
                <textarea @bind="Description" rows="3"></textarea>
            </div>

            <div class="form-group">
                <label>Фото:</label>
                <InputFile OnChange="HandleFileUpload" />
            </div>

            <button class="btn" type="submit">Сохранить</button>
        </form>
            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <div class="error-message">@ErrorMessage</div>
            }
            @if (!string.IsNullOrWhiteSpace(SuccessMessage))
            {
                <div class="success-message">@SuccessMessage</div>
            }
    </div>
}
</body>
</html>

@code {
    private string? selectedRoomId;
    private string RoomName = "";
    private int SelectedFloor = 1;
    private decimal Area;
    private decimal RentPrice;
    private int? SelectedPurposeId;
    private string Description = "";
    private IBrowserFile? UploadedFile;
    private string SvgContent = "";
    private Помещения? SelectedRoom;
    [Inject] public IWebHostEnvironment Env { get; set; }
    private Dictionary<string, Помещения> Доступные = new();
    private ElementReference RoomInfoRef;

    private HashSet<string> ExistingRoomIds = new();

    private string? SuccessMessage;

    private List<НазначенияПомещений> Purposes = new();

    protected override async Task OnInitializedAsync()
    {
        Purposes = await Db.НазначенияПомещенийs.ToListAsync();
        await LoadSvgForFloor(SelectedFloor);
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }


    private async Task OnFloorChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int floor))
        {
            SelectedFloor = floor;
            await LoadSvgForFloor(SelectedFloor);
            StateHasChanged(); // если нужно явно перерисовать
            Console.WriteLine("📦 Компонент должен перерисоваться");

        }
    }
    private static List<string> GetAllSvgRoomIds(string svg)
    {
        var matches = Regex.Matches(svg, "id=\"(Store-[\\w-]+)\"");
        return matches.Select(m => m.Groups[1].Value).Distinct().ToList();
    }

    private DotNetObjectReference<AddStore>? dotNetRef;

    private string? _lastScrolledId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("mapRent.setupClickHandler", dotNetRef);
        }

        // Выполняем прокрутку, если выбранное помещение изменилось
        if (SelectedRoom != null && SelectedRoom.Расположение != _lastScrolledId)
        {
            _lastScrolledId = SelectedRoom.Расположение;
            await JS.InvokeVoidAsync("scrollToRoomInfo");
        }
    }


    public async ValueTask DisposeAsync()
    {
        dotNetRef?.Dispose();
    }

    [JSInvokable]
    public async Task SetSelectedRoom(string id)
    {
        Console.WriteLine("🧲 Room ID clicked: " + id);

        // ❌ Уже есть в базе — значит занято
        if (ExistingRoomIds.Contains(id))
        {
            Console.WriteLine("⛔ Это помещение уже есть в базе данных — занято");
            return;
        }

        // ✅ Новое помещение — показываем форму
        selectedRoomId = id;
        SelectedRoom = new Помещения
            {
                Расположение = id,
                Этаж = SelectedFloor
            };

        Console.WriteLine($"✅ Новое помещение выбрано: {id}");
        StateHasChanged();
    }



    private async Task LoadSvgForFloor(int floor)
    {
        SelectedRoom = null; // 🛑 СБРАСЫВАЕМ при смене этажа

        string path = $"wwwroot/images/Frame{floor}.svg";
        SvgContent = await File.ReadAllTextAsync(path);

        var всеИзБд = await Db.Помещенияs.ToListAsync();
        ExistingRoomIds = всеИзБд.Select(p => p.Расположение).ToHashSet();

        var доступные = всеИзБд.Where(p => p.ДоступноДляАренды && p.Этаж == floor).ToList();
        Доступные = доступные.ToDictionary(p => p.Расположение, p => p);

        // 🔽 Вставь вот этот блок
        foreach (var kvp in Доступные)
        {
            Console.WriteLine($"✔ В доступных: {kvp.Key}");
        }

        var svgIds = GetAllSvgRoomIds(SvgContent);

        foreach (var id in svgIds)
        {
            var помещение = всеИзБд.FirstOrDefault(p => p.Расположение == id);

            if (помещение != null) // помещение уже есть в БД = значит занято
            {
                SvgContent = Regex.Replace(
                    SvgContent,
                    $@"<g([^>]*?)id=""{id}""",
                    match =>
                    {
                        var gTag = match.Value;

                        // Удалим старый class, если он есть
                        gTag = Regex.Replace(gTag, @"class\s*=\s*""[^""]*""", "");

                        // Вставим svg-disabled
                        return Regex.Replace(gTag, "<g", "<g class=\"svg-disabled\"");
                    });
            }
        }

        Console.WriteLine(SvgContent.Contains("svg-disabled") ? "✅ svg-disabled есть" : "❌ svg-disabled не найден");

    }
    // Можно добавить проверку типа файла
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        const long maxFileSize = 2 * 1024 * 1024;
        var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".webp" };

        var fileExt = Path.GetExtension(e.File.Name).ToLower();

        if (!allowedExtensions.Contains(fileExt))
        {
            ErrorMessage = "❌ Можно загружать только изображения (JPG, PNG, WebP)";
            return;
        }

        if (e.File.Size > maxFileSize)
        {
            ErrorMessage = $"❌ Максимальный размер файла: {maxFileSize / 1024 / 1024} МБ";
            return;
        }

        UploadedFile = e.File;
        ErrorMessage = null; // Сбрасываем ошибку если файл подходит
    }

    private string? ErrorMessage;

    private async Task HandleFormSubmit()
    {
        // Сбрасываем сообщение об ошибке
        ErrorMessage = null;
        SuccessMessage = null;

        // Проверка названия
        if (string.IsNullOrWhiteSpace(RoomName))
        {
            ErrorMessage = "❌ Название помещения обязательно для заполнения";
            return;
        }

        // Проверка площади
        if (Area < 5 || Area > 300)
        {
            ErrorMessage = "❌ Площадь должна быть от 5 до 300 м²";
            return;
        }

        // Проверка стоимости аренды
        if (RentPrice < 10000)
        {
            ErrorMessage = "❌ Стоимость аренды должна быть не менее 10,000 ₽";
            return;
        }

        // Проверка назначения
        if (SelectedPurposeId == null)
        {
            ErrorMessage = "❌ Необходимо выбрать назначение помещения";
            return;
        }

        try
        {
            var newRoom = new Помещения
                {
                    Название = RoomName,
                    Этаж = SelectedFloor,
                    Площадь = Area,
                    СтоимостьАренды = RentPrice,
                    Расположение = selectedRoomId!,
                    ДоступноДляАренды = true,
                    Описание = Description,
                    IdНазначения = SelectedPurposeId,
                    Фото = UploadedFile != null ? await UploadImage(UploadedFile) : null
                };

            Db.Помещенияs.Add(newRoom);
            await Db.SaveChangesAsync();

            SuccessMessage = "✅ Помещение успешно добавлено!";

            // Сброс формы после успешного сохранения
            selectedRoomId = null;
            SelectedRoom = null;
            RoomName = "";
            Area = 0;
            RentPrice = 0;
            SelectedPurposeId = null;
            Description = "";
            UploadedFile = null;

            // Обновляем SVG, чтобы новое помещение отобразилось как занятое
            await LoadSvgForFloor(SelectedFloor);

            // Через 3 секунды убираем сообщение об успехе
            await Task.Delay(3000);
            SuccessMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"❌ Ошибка при сохранении: {ex.Message}";
        }
    }


    private async Task<string> UploadImage(IBrowserFile file)
    {
        var fileName = Path.GetRandomFileName() + Path.GetExtension(file.Name);
        var folderPath = Path.Combine(Env.WebRootPath, "images");

        if (!Directory.Exists(folderPath))
            Directory.CreateDirectory(folderPath);

        var filePath = Path.Combine(folderPath, fileName);

        // Увеличиваем лимит до 2 МБ (или другого нужного вам значения)
        await using var stream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024).CopyToAsync(stream); // 2 МБ

        return "/images/" + fileName;
    }
    private void OnFloorChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var floor))
        {
            SelectedFloor = floor;
        }
    }
}


