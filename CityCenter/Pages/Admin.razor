@page "/admin-dashboard"
@using CityCenter.Data
@using Microsoft.EntityFrameworkCore
@using CityCenter.Models
@using QuestPDF.Fluent;
@inject NavigationManager NavigationManager
@inject AppDbContext Db

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #0a0a0a, #111);
        color: #fff;
        margin: 0;
        padding: 0;
    }

    .admin-screen {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 60px 40px;
    }

    h2 {
        font-size: 3rem;
        margin-bottom: 30px;
        color: #fff;
        text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);
    }

    .form-control {
        padding: 22px;
        font-size: 1.4rem;
        border-radius: 12px;
        border: none;
        margin-bottom: 25px;
        width: 100%;
        max-width: 600px;
        background-color: #1e1e1e;
        color: #fff;
        transition: box-shadow 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            box-shadow: 0 0 10px #00aaff;
        }

    .btn {
        padding: 18px 35px;
        font-size: 1.4rem;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        background: #00aaff;
        color: white;
        margin-bottom: 30px;
        transition: background 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
    }

        .btn:hover {
            background: #0088cc;
            transform: scale(1.03);
            box-shadow: 0 0 10px #00aaff;
        }

    .message {
        font-size: 1.2rem;
        margin-bottom: 20px;
    }

    .grid {
        width: 100%;
        max-width: 1200px;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
    }

    .card {
        background: linear-gradient(135deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
        padding: 30px;
        border-radius: 20px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        font-size: 1.3rem;
        color: #fff;
    }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px #00aaff;
        }

        .card h4 {
            margin-bottom: 12px;
            font-size: 1.6rem;
        }

    .tabs {
        display: flex;
        gap: 20px;
        margin-bottom: 40px;
    }

    .tab-item {
        padding: 12px 24px;
        font-size: 1.2rem;
        border-radius: 10px;
        background-color: #2c2c2c;
        color: #ccc;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .tab-item.active, .tab-item:hover {
            background-color: #00aaff;
            color: #fff;
        }
</style>
<ErrorBoundary>
<div class="admin-screen">
    <h2>Админ-панель</h2>

    <div class="tabs">
        <div class="tab-item @(activeTab == "rooms" ? "active" : "")" @onclick='() => SetTab("rooms")'>Помещения</div>
        <div class="tab-item @(activeTab == "renters" ? "active" : "")" @onclick='() => SetTab("renters")'>Арендаторы</div>
        <div class="tab-item @(activeTab == "requests" ? "active" : "")" @onclick='() => SetTab("requests")'>Заявки</div>
    </div>

  @if (activeTab == "rooms")
{
    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; max-width: 1200px;">
        <input type="text" class="form-control" placeholder="Поиск по помещениям..." @bind="searchTerm" />
        <button class="btn" style="margin-left: 20px; white-space: nowrap;" @onclick="GoToAddRoom">
            ➕ Добавить помещение
        </button>
    </div>


        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="message" style="color:@(IsError ? "#ff6b6b" : "#4caf50")">@Message</div>
        }

        <div class="grid">
            @foreach (var room in FilteredRooms)
            {
                <div class="card">
                    @if (!string.IsNullOrWhiteSpace(room.Фото))
                    {
                        <img src="@room.Фото" alt="Фото помещения"
                             style="width: 100%; max-height: 160px; object-fit: cover; border-radius: 10px; margin-bottom: 15px;" />
                    }
                    else
                    {
                        <div style="width: 100%; height: 160px; background: #333; border-radius: 10px; margin-bottom: 15px; display: flex; align-items: center; justify-content: center; color: #aaa;">
                            Фото отсутствует
                        </div>
                    }

                    <h4>@room.Название</h4>
                    <p>Этаж: @room.Этаж</p>
                    <p>Площадь: @room.Площадь м²</p>
                    <p>Статус: @(room.ДоступноДляАренды ? "Доступно" : "Занято")</p>

                    <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px;">
                        <button class="btn" @onclick="() => EditRoom(room.IdПомещения)">✏️ Редактировать</button>
                        <button class="btn" style="background-color: #ff4c4c;" @onclick="() => DeleteRoom(room.IdПомещения)">🗑 Удалить</button>
                    </div>
                </div>



            }
        </div>
    }
    else if (activeTab == "renters")
    {
        <div class="grid">
            @foreach (var renter in Renters)
            {
                <div class="card">
                    <h4>@renter.Имя</h4>
                    <p>Контакты: @renter.КонтактнаяИнформация</p>
                    <p>Номер договора: @renter.НомерДоговора</p>
                    <p>Статус: @renter.Статус</p>
                </div>
            }
        </div>
    }
        else if (activeTab == "requests")
        {
            @if (Applications == null || UserNames == null || RoomNames == null)
            {
                <p>Загрузка данных...</p>
            }
            else
            {
                <div class="grid">
                    @foreach (var app in Applications)
                    {
                        <div class="card">
                            <h4>Заявка №@app.ID_Заявки</h4>
                            <p>Пользователь: @UserNames.GetValueOrDefault(app.ID_Пользователя, "Неизвестный")</p>
                            <p>Помещение: @RoomNames.GetValueOrDefault(app.ID_Помещения, "Удалено")</p>
                            <p>Дата заявки: @app.ДатаЗаявки.ToShortDateString()</p>
                            <p>Комментарий: @app.Комментарий</p>
                            <p>Статус: @app.Статус</p>

                            @if (!string.IsNullOrWhiteSpace(app.ФотоОплаты))
                            {
                                <img src="@app.ФотоОплаты" alt="Скрин оплаты" style="max-width: 300px; margin-top: 10px; border-radius: 10px;" />
                            }

                            @if (app.Статус == "В обработке")
                            {
                                <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px;">
                                    <button class="btn" @onclick='() => UpdateStatus(app.ID_Заявки, "Принято")'>✅ Принять</button>
                                    <button class="btn" style="background-color: #ff4c4c;" @onclick='() => UpdateStatus(app.ID_Заявки, "Отклонено")'>⛔ Отклонить</button>
                                </div>
                            }
                        </div>
                    }
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(Message))
            {
                <p style="color:@(IsError ? "#ff6b6b" : "lightgreen"); font-weight: bold;">@Message</p>
            }
        }


</div>
</ErrorBoundary>

@code {
    private string? Message;
    private bool IsError;
    private string? searchTerm;
    private string activeTab = "rooms";

    private List<Помещения> Rooms = new();
    private List<Арендаторы> Renters = new();
    private List<ЗаявкаНаАренду> Applications = new();

    private Dictionary<int, string> UserNames = new();
    private Dictionary<int, string> RoomNames = new();


    [Inject] public IWebHostEnvironment Env { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
        await LoadRenters();
        await LoadApplications();
    }

    private async Task LoadRooms()
    {
        Rooms = await Db.Помещенияs.ToListAsync();
    }

    private async Task LoadRenters()
    {
        Renters = await Db.Арендаторыs.ToListAsync();
    }

    private async Task LoadApplications()
    {
        Applications = await Db.ЗаявкиНаАренду.ToListAsync();

        var userIds = Applications.Select(z => z.ID_Пользователя).Distinct();
        var roomIds = Applications.Select(z => z.ID_Помещения).Distinct();

        var users = await Db.Пользователиs
            .Where(u => userIds.Contains(u.IdПользователя))
            .ToListAsync();

        var rooms = await Db.Помещенияs
            .Where(r => roomIds.Contains(r.IdПомещения))
            .ToListAsync();

        UserNames = users.ToDictionary(u => u.IdПользователя, u => u.Фио);
        RoomNames = rooms.ToDictionary(r => r.IdПомещения, r => r.Название);
    }

    private IEnumerable<Помещения> FilteredRooms =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? Rooms
            : Rooms.Where(r => r.Название.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task DeleteRoom(int id)
    {
        var room = await Db.Помещенияs.FindAsync(id);
        if (room != null)
        {
            Db.Помещенияs.Remove(room);
            await Db.SaveChangesAsync();
            Message = "Удалено";
            IsError = false;
            await LoadRooms();
        }
    }

   private async Task UpdateStatus(int id, string newStatus)
{
    try
    {
        var app = await Db.ЗаявкиНаАренду.FindAsync(id);
        if (app != null)
        {
            app.Статус = newStatus;
            await Db.SaveChangesAsync();

            if (newStatus == "Принято")
            {
                var арендатор = await Db.Арендаторыs
                    .FirstOrDefaultAsync(a => a.IdПользователя == app.ID_Пользователя);
                if (арендатор == null)
                {
                    Message = "❗ Арендатор не найден.";
                    IsError = true;
                    return;
                }

                bool alreadyExists = await Db.Арендаs.AnyAsync(a =>
                    a.IdАрендатора == арендатор.IdАрендатора &&
                    a.IdПомещения == app.ID_Помещения);

                if (!alreadyExists)
                {
                        // ➕ ДОБАВЬ "Цель = app.Цель"
                        var аренда = new Аренда
                            {
                                IdАрендатора = арендатор.IdАрендатора,
                                IdПомещения = app.ID_Помещения,
                                ДатаНачала = DateTime.Now,
                                ДатаОкончания = DateTime.Now.AddMonths(1),
                                Цель = " " // <--- вот это исправляет ошибку
                            };


                    Db.Арендаs.Add(аренда);

                    var помещение = await Db.Помещенияs.FindAsync(app.ID_Помещения);
                    if (помещение != null)
                        помещение.ДоступноДляАренды = false;

                    await Db.SaveChangesAsync();

                    var аренда1 = await Db.Арендаs
                        .Include(a => a.IdПомещенияNavigation)
                        .Include(a => a.IdАрендатораNavigation)
                        .FirstOrDefaultAsync(a =>
                            a.IdАрендатора == арендатор.IdАрендатора &&
                            a.IdПомещения == app.ID_Помещения);

                    if (аренда1 != null)
                    {
                        string fileName = Guid.NewGuid() + ".pdf";
                        string filePath = Path.Combine(Env.WebRootPath, "contracts", fileName);
                        Directory.CreateDirectory(Path.GetDirectoryName(filePath)!);

                            string текст = "ДОГОВОР АРЕНДЫ\n\n" +
                        $"Арендатор: {UserNames[app.ID_Пользователя]}\n" +
                        $"Помещение: {RoomNames[app.ID_Помещения]}\n" +
                        $"Площадь: {аренда1.IdПомещенияNavigation.Площадь} м²\n" +
                        $"Этаж: {аренда1.IdПомещенияNavigation.Этаж}\n\n" +
                        $"Дата начала: {аренда1.ДатаНачала:d}\n" +
                        $"Дата окончания: {аренда1.ДатаОкончания:d}\n\n" +
                        "Настоящим подтверждается аренда помещения сроком на месяц.";


                        QuestPDF.Fluent.Document.Create(container =>
                        {
                            container.Page(page =>
                            {
                                page.Margin(50);
                                page.Content().Text(текст).FontSize(14);
                            });
                        }).GeneratePdf(filePath);

                        app.Комментарий += $"\n[Договор] /contracts/{fileName}";
                        await Db.SaveChangesAsync();
                    }
                }
            }

            await LoadApplications();
            Message = "✅ Статус обновлён!";
            IsError = false;
        }
    }
    catch (Exception ex)
    {
        Message = "❗ Ошибка: " + ex.Message + " — " + ex.InnerException?.Message;
        IsError = true;
    }
}


    private void GoToAddRoom()
    {
        NavigationManager.NavigateTo("/add-room");
    }

    private void EditRoom(int id)
    {
        NavigationManager.NavigateTo($"/edit-room/{id}");
    }

    private void SetTab(string tab)
    {
        activeTab = tab;
        Message = null;
    }
}


