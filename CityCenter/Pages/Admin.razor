@page "/admin-dashboard"
@using CityCenter.Data
@using Microsoft.EntityFrameworkCore
@using CityCenter.Models
@using QuestPDF.Fluent;
@inject NavigationManager NavigationManager
@inject AppDbContext Db
@inject ThemeService ThemeService
<html lang="ru" class="@(ThemeService.IsLightTheme ? "light-theme" : "dark-theme")">
<head>
    <style>
        /* Общие стили (светлая тема по умолчанию) */
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f5f5, #e0e0e0);
            color: #333;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            transition: all 0.3s ease;
        }

        .admin-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 60px 40px;
            min-height: calc(100vh - 120px);
            background: linear-gradient(135deg, #f5f5f5, #e0e0e0);
        }

        h2 {
            font-size: 3rem;
            margin-bottom: 30px;
            color: #222;
            text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.1);
        }

        .form-control {
            padding: 22px;
            font-size: 1.4rem;
            border-radius: 12px;
            border: 1px solid #ddd;
            margin-bottom: 25px;
            width: 100%;
            max-width: 600px;
            background-color: #fff;
            color: #333;
            transition: box-shadow 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

            .form-control:focus {
                outline: none;
                box-shadow: 0 0 10px rgba(0, 120, 215, 0.5);
                border-color: #0078d7;
            }

        .btn {
            padding: 18px 35px;
            font-size: 1.4rem;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            background: #0078d7;
            color: white;
            margin-bottom: 30px;
            transition: all 0.3s ease;
        }

            .btn:hover {
                background: #0066cc;
                transform: scale(1.03);
                box-shadow: 0 0 10px rgba(0, 120, 215, 0.5);
            }

        .btn-small {
            padding: 20px 28px;
            font-size: 1.3rem;
        }

        .message {
            font-size: 1.2rem;
            margin-bottom: 20px;
        }

        .grid {
            width: 100%;
            max-width: 1200px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
        }

        .card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(245, 245, 245, 0.95));
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            font-size: 1.3rem;
            color: #333;
            border: 1px solid #e0e0e0;
        }

            .card:hover {
                transform: scale(1.05);
                box-shadow: 0 0 30px rgba(0, 120, 215, 0.3);
            }

            .card h4 {
                margin-bottom: 12px;
                font-size: 1.6rem;
                color: #222;
            }

        .tabs {
            display: flex;
            gap: 20px;
            margin-bottom: 40px;
        }

        .tab-item {
            padding: 12px 24px;
            font-size: 1.2rem;
            border-radius: 10px;
            background-color: #e0e0e0;
            color: #555;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .tab-item.active, .tab-item:hover {
                background-color: #0078d7;
                color: #fff;
            }

        /* Темная тема */
        body.dark-theme {
            background: linear-gradient(135deg, #0a0a0a, #111);
            color: #fff;
        }

        .dark-theme .admin-screen {
            background: linear-gradient(135deg, #0a0a0a, #111);
        }

        .dark-theme h2 {
            color: #fff;
            text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);
        }

        .dark-theme .form-control {
            background-color: #1e1e1e;
            color: #fff;
            border: none;
            box-shadow: 0 0 5px rgba(0,0,0,0.5);
        }

            .dark-theme .form-control:focus {
                box-shadow: 0 0 10px #00aaff;
            }

        .dark-theme .btn {
            background: #00aaff;
        }

        .dark-theme .card h4 {
            margin-bottom: 12px;
            font-size: 1.6rem;
            color: #fff;
        }
            .dark-theme .btn:hover {
                background: #0088cc;
                box-shadow: 0 0 10px #00aaff;
            }

        .dark-theme .card {
            background: linear-gradient(135deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
            color: #fff;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
            border: none;
        }

            .dark-theme .card:hover {
                box-shadow: 0 0 30px #00aaff;
            }

        .dark-theme .tab-item {
            background-color: #2c2c2c;
            color: #ccc;
        }

            .dark-theme .tab-item.active,
            .dark-theme .tab-item:hover {
                background-color: #00aaff;
                color: #fff;
            }

        /* Специфические стили */
        .application-card {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            min-height: 520px;
        }

        .card-content {
            flex-grow: 1;
        }

        .delete-btn {
            background-color: #aaa;
            margin-top: auto;
            margin-top: 20px;
        }

        .dark-theme .delete-btn {
            background-color: #777;
        }

        .card-image-placeholder {
            width: 100%;
            height: 160px;
            background: #f0f0f0;
            border-radius: 10px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #888;
        }

        .dark-theme .card-image-placeholder {
            background: #333;
            color: #aaa;
        }

        /* Модальное окно */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-image {
            max-width: 90%;
            max-height: 90%;
            object-fit: contain;
        }

        .modal-close-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: #ff4c4c;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            color: white;
            font-size: 20px;
            cursor: pointer;
        }
    </style>
</head>
<body class="@(ThemeService.IsLightTheme ? "light-theme" : "dark-theme")">
    <ErrorBoundary>
        <div class="admin-screen">
            <!-- Остальной код остается без изменений -->
            <h2>Админ-панель</h2>

            <div class="tabs">
                <div class="tab-item @(activeTab == "rooms" ? "active" : "")" @onclick='() => SetTab("rooms")'>Помещения</div>
                <div class="tab-item @(activeTab == "renters" ? "active" : "")" @onclick='() => SetTab("renters")'>Арендаторы</div>
                <div class="tab-item @(activeTab == "requests" ? "active" : "")" @onclick='() => SetTab("requests")'>Заявки</div>
            </div>

            @if (activeTab == "rooms")
            {
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; max-width: 1200px;">
                    <input type="text" class="form-control" placeholder="Поиск по помещениям..." @bind="searchTerm" />
                    <button class="btn" style="margin-left: 20px; white-space: nowrap;" @onclick="GoToAddRoom">
                        ➕ Добавить помещение
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="message" style="color:@(IsError ? "#ff6b6b" : "#4caf50")">@Message</div>
                }

                <div class="grid">
                    @foreach (var room in FilteredRooms)
                    {
                        <div class="card">
                            @if (!string.IsNullOrWhiteSpace(room.Фото))
                            {
                                <img src="@room.Фото" alt="Фото помещения"
                                     style="width: 100%; max-height: 160px; object-fit: cover; border-radius: 10px; margin-bottom: 15px;" />
                            }
                            else
                            {
                                <div class="card-image-placeholder">
                                    Фото отсутствует
                                </div>
                            }

                            <h4>@room.Название</h4>
                            <p>Этаж: @room.Этаж</p>
                            <p>Расположение: @room.Расположение</p>
                            <p>Площадь: @room.Площадь м²</p>
                            <p>Стоимость: @room.СтоимостьАренды.ToString("N0") руб/мес</p>
                            <p>Статус: @(room.ДоступноДляАренды ? "Доступно" : "Занято")</p>

                            <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 10px;">
                                <button class="btn btn-small" @onclick="() => EditRoom(room.IdПомещения)">✏️Редактировать</button>
                                <button class="btn delete-btn" @onclick="() => DeleteRoom(room.IdПомещения)">🗑 Удалить</button>
                            </div>
                        </div>
                    }
                </div>
            }

    else if (activeTab == "renters")
    {
        <div class="grid">
            @foreach (var renter in Renters)
            {
                    <div class="card">
                        <h4>@renter.Имя</h4>
                        <p>Контакты: @renter.КонтактнаяИнформация</p>
                        <p>Номер договора: @renter.НомерДоговора</p>
                        <p>Статус: @renter.Статус</p>

                        <button class="btn" style="margin-top: 10px;" @onclick="() => ToggleRenter(renter.IdАрендатора)">
                            @(ExpandedRenters.ContainsKey(renter.IdАрендатора) && ExpandedRenters[renter.IdАрендатора] ? "🔼 Скрыть помещения" : "🔽 Показать помещения")
                        </button>

                        @if (ExpandedRenters.ContainsKey(renter.IdАрендатора) && ExpandedRenters[renter.IdАрендатора])
                        {
                            var rooms = AllRents
                            .Where(a => a.IdАрендатора == renter.IdАрендатора)
                            .Select(a => a.IdПомещенияNavigation)
                            .ToList();

                            @if (rooms.Count > 0)
                            {
                                <ul style="margin-top: 10px;">
                                    @foreach (var room in rooms)
                                    {
                                        <li style="margin: 5px 0;">
                                            <b>@room.Название</b> — этаж @room.Этаж, @room.Площадь м²
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p style="margin-top: 10px; color: #aaa;">Нет арендованных помещений.</p>
                            }
                        }
                    </div>

            }
        </div>
    }
        else if (activeTab == "requests")
        {
            @if (Applications == null || UserNames == null || RoomNames == null)
            {
                <p>Загрузка данных...</p>
            }
            else
            {
                <div class="grid">
                    @foreach (var app in Applications)
                    {
                        <div class="card application-card">
                            <div class="card-content">
                                <h4>Заявка №@app.ID_Заявки</h4>
                                <p>Пользователь: @UserNames.GetValueOrDefault(app.ID_Пользователя, "Неизвестный")</p>
                                    <p>
                                        Email:
                                        @{
                                            var email = UserEmails.GetValueOrDefault(app.ID_Пользователя);
                                        }
                                        @if (!string.IsNullOrWhiteSpace(email))
                                        {
                                            <a href="mailto:@email" style="color: #007bff; text-decoration: underline;">@email</a>
                                        }
                                        else
                                        {
                                            <span style="color: gray;">Не указан</span>
                                        }
                                    </p>

                                <p>Помещение: @RoomNames.GetValueOrDefault(app.ID_Помещения, "Удалено")</p>
                                <p>Дата заявки: @app.ДатаЗаявки.ToShortDateString()</p>
                                <p>@app.Комментарий</p>
                                <p>Статус: @app.Статус</p>

                                    @if (!string.IsNullOrWhiteSpace(app.ФотоОплаты))
                                    {
                                        var ext = Path.GetExtension(app.ФотоОплаты).ToLower();

                                        if (ext == ".jpg" || ext == ".jpeg" || ext == ".png")
                                        {
                                            <div style="position: relative;">
                                                <img src="@app.ФотоОплаты"
                                                     alt="Документ/Фото"
                                                     style="width: 100%;
                        max-height: 200px;
                        object-fit: contain;
                        margin-top: 10px;
                        border-radius: 10px;
                        cursor: pointer;"
                                                     @onclick="() => ShowFullImage(app.ФотоОплаты)" />

                                                <div style="position: absolute;
                        top: 20px;
                        right: 20px;
                        background: rgba(0,0,0,0.7);
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        pointer-events: none;">
                                                    🔍
                                                </div>
                                            </div>
                                        }
                                        else if (ext == ".pdf" || ext == ".doc" || ext == ".docx")
                                        {
                                            <p style="margin-top: 10px;">
                                                📎 Документ:
                                                <a href="@app.ФотоОплаты"
                                                   target="_blank"
                                                   style="color: #007bff; text-decoration: underline;">
                                                    Открыть @ext.ToUpper().TrimStart('.')
                                                </a>
                                            </p>
                                        }
                                        else
                                        {
                                            <p style="color: gray;">📄 Формат не поддерживается для просмотра</p>
                                        }
                                    }


                                @if (app.Статус == "В обработке")
                                {
                                    <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px;">
                                        <button class="btn" @onclick='() => UpdateStatus(app.ID_Заявки, "Принято")'>✅ Принять</button>
                                        <button class="btn" style="background-color: #ff4c4c;" @onclick='() => UpdateStatus(app.ID_Заявки, "Отклонено")'>⛔ Отклонить</button>
                                    </div>
                                }
                            </div>

                            @if (app.Статус == "Принято" || app.Статус == "Отклонено")
                            {
                                <button class="btn delete-btn" style="background-color: #777;" @onclick='() => DeleteApplication(app.ID_Заявки)'>🗑 Удалить заявку</button>
                            }
                        </div>
                    }
                </div>

                <!-- Модальное окно для полноразмерного изображения -->
                @if (showFullImage)
                {
                    <div style="position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(0,0,0,0.9);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        z-index: 1000;"
                         @onclick="CloseFullImage">

                        <img src="@currentImageUrl"
                             style="max-width: 90%;
                            max-height: 90%;
                            object-fit: contain;" />

                        <button style="position: absolute;
                              top: 20px;
                              right: 20px;
                              background: #ff4c4c;
                              border: none;
                              width: 40px;
                              height: 40px;
                              border-radius: 50%;
                              color: white;
                              font-size: 20px;
                              cursor: pointer;"
                                @onclick="CloseFullImage">
                            ×
                        </button>
                    </div>
                }
            }

            @if (!string.IsNullOrWhiteSpace(Message))
            {
                <p style="color:@(IsError ? "#ff6b6b" : "lightgreen"); font-weight: bold;">@Message</p>
            }
        }


</div>
</ErrorBoundary>
</body>
</html>

@code {
    private string? Message;
    private bool IsError;
    private string? searchTerm;
    private string activeTab = "rooms";

    private List<Помещения> Rooms = new();
    private List<Арендаторы> Renters = new();
    private List<ЗаявкаНаАренду> Applications = new();

    private Dictionary<int, string> UserNames = new();
    private Dictionary<int, string> RoomNames = new();
    private Dictionary<int, string> UserEmails = new();
    private List<Аренда> AllRents = new();


    private Dictionary<int, bool> ExpandedRenters = new(); // IdАрендатора → раскрыт или нет


    private bool showFullImage = false;
    private string currentImageUrl = string.Empty;

    private void ShowFullImage(string imageUrl)
    {
        currentImageUrl = imageUrl;
        showFullImage = true;
    }

    private void CloseFullImage()
    {
        showFullImage = false;
        currentImageUrl = string.Empty;
    }

    [Inject] public IWebHostEnvironment Env { get; set; }


    private void ToggleRenter(int renterId)
    {
        if (ExpandedRenters.ContainsKey(renterId))
            ExpandedRenters[renterId] = !ExpandedRenters[renterId];
        else
            ExpandedRenters[renterId] = true;
    }

    private async Task DeleteApplication(int id)
    {
        var app = await Db.ЗаявкиНаАренду.FindAsync(id);
        if (app != null)
        {
            Db.ЗаявкиНаАренду.Remove(app);
            await Db.SaveChangesAsync();
            Message = "🗑 Заявка удалена";
            IsError = false;
            await LoadApplications();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
        await LoadRenters();
        AllRents = await Db.Арендаs
    .Include(a => a.IdПомещенияNavigation)
    .ToListAsync();

        await LoadApplications();
    }

    private async Task LoadRooms()
    {
        Rooms = await Db.Помещенияs
     .OrderByDescending(r => r.IdПомещения)
     .ToListAsync();

    }

    private async Task LoadRenters()
    {
        Renters = await Db.Арендаторыs
       .OrderByDescending(r => r.IdАрендатора) // или .ДатаРегистрации
       .ToListAsync();

    }

    private async Task LoadApplications()
    {
        Applications = await Db.ЗаявкиНаАренду
      .OrderByDescending(z => z.ДатаЗаявки)
      .ToListAsync();


        var userIds = Applications.Select(z => z.ID_Пользователя).Distinct();
        var roomIds = Applications.Select(z => z.ID_Помещения).Distinct();

        var users = await Db.Пользователиs
            .Where(u => userIds.Contains(u.IdПользователя))
            .ToListAsync();

        var rooms = await Db.Помещенияs
            .Where(r => roomIds.Contains(r.IdПомещения))
            .ToListAsync();

        UserNames = users.ToDictionary(u => u.IdПользователя, u => u.Фио);
        UserEmails = users.ToDictionary(u => u.IdПользователя, u => u.Email);
        RoomNames = rooms.ToDictionary(r => r.IdПомещения, r => r.Название);
    }

    private IEnumerable<Помещения> FilteredRooms =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? Rooms
            : Rooms.Where(r => r.Название.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task DeleteRoom(int id)
    {
        var room = await Db.Помещенияs.FindAsync(id);
        if (room != null)
        {
            Db.Помещенияs.Remove(room);
            await Db.SaveChangesAsync();
            Message = "Удалено";
            IsError = false;
            await LoadRooms();
        }
    }

   private async Task UpdateStatus(int id, string newStatus)
{
    try
    {
        var app = await Db.ЗаявкиНаАренду.FindAsync(id);
        if (app != null)
        {
            app.Статус = newStatus;
            await Db.SaveChangesAsync();

            if (newStatus == "Принято")
            {
                var арендатор = await Db.Арендаторыs
                    .FirstOrDefaultAsync(a => a.IdПользователя == app.ID_Пользователя);
                if (арендатор == null)
                {
                    Message = "❗ Арендатор не найден.";
                    IsError = true;
                    return;
                }

                bool alreadyExists = await Db.Арендаs.AnyAsync(a =>
                    a.IdАрендатора == арендатор.IdАрендатора &&
                    a.IdПомещения == app.ID_Помещения);

                if (!alreadyExists)
                {
                        // ➕ ДОБАВЬ "Цель = app.Цель"
                        var аренда = new Аренда
                            {
                                IdАрендатора = арендатор.IdАрендатора,
                                IdПомещения = app.ID_Помещения,
                                ДатаНачала = DateTime.Now,
                                ДатаОкончания = DateTime.Now.AddMonths(1),
                                Цель = " " // <--- вот это исправляет ошибку
                            };


                    Db.Арендаs.Add(аренда);

                    var помещение = await Db.Помещенияs.FindAsync(app.ID_Помещения);
                    if (помещение != null)
                        помещение.ДоступноДляАренды = false;

                    await Db.SaveChangesAsync();

                    var аренда1 = await Db.Арендаs
                        .Include(a => a.IdПомещенияNavigation)
                        .Include(a => a.IdАрендатораNavigation)
                        .FirstOrDefaultAsync(a =>
                            a.IdАрендатора == арендатор.IdАрендатора &&
                            a.IdПомещения == app.ID_Помещения);
                }
            }

            await LoadApplications();
            Message = "✅ Статус обновлён!";
            IsError = false;
        }
    }
    catch (Exception ex)
    {
        Message = "❗ Ошибка: " + ex.Message + " — " + ex.InnerException?.Message;
        IsError = true;
    }
}


    private void GoToAddRoom()
    {
        NavigationManager.NavigateTo("/add-room");
    }

    private void EditRoom(int id)
    {
        NavigationManager.NavigateTo($"/edit-room/{id}");
    }

    private void SetTab(string tab)
    {
        activeTab = tab;
        Message = null;
    }
}


