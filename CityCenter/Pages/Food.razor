@page "/food"
@using CityCenter.Data
@using CityCenter.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject ThemeService ThemeService
<!DOCTYPE html>
<html lang="ru" class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<head>
<style>
        .no-photo-placeholder {
            height: 100%;
            background: linear-gradient(135deg, #333, #444);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #aaa;
            font-size: 1rem;
        }
    .cafes-screen {
        padding: 60px 30px;
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #0a0a0a, #111);
        color: white;
        min-height: 100vh;
        width: 100%;
        box-sizing: border-box;
        text-align: center;
    }

    .cafes-title {
        font-size: 3rem;
        text-align: center;
        margin-bottom: 40px;
        color: #ff6b6b;
        text-shadow: 2px 2px 10px rgba(0,0,0,0.6);
    }

    .cafes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 30px;
        max-width: 1300px;
        margin: 0 auto;
        padding-bottom: 60px;
    }

    .cafe-card {
        background: linear-gradient(135deg, #1b1b1b, #2a2a2a);
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0,0,0,0.6);
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .cafe-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(255, 107, 107, 0.4);
        }

    .cafe-card-img-container {
        width: 100%;
        height: 180px;
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 15px;
        position: relative;
    }

    .cafe-card img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .cafe-card:hover img {
        transform: scale(1.05);
    }

    .no-photo-placeholder {
        height: 100%;
        background: linear-gradient(135deg, #333, #444);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #aaa;
        font-size: 1rem;
    }

    .cafe-card-content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .cafe-card h3 {
        margin: 0 0 10px 0;
        font-size: 1.4rem;
        color: #fff;
    }

    .cafe-card p {
        margin: 5px 0;
        color: #ccc;
        font-size: 0.95rem;
    }

    .cafe-card-link {
        display: inline-block;
        margin-top: auto;
        padding: 10px 16px;
        background-color: #ff6b6b;
        color: white;
        text-decoration: none;
        border-radius: 8px;
        transition: all 0.3s ease;
        text-align: center;
        font-weight: 500;
    }

        .cafe-card-link:hover {
            background-color: #ff5252;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .no-cafes-message {
        font-size: 1.5rem;
        color: #aaa;
        margin-top: 50px;
        padding: 30px;
        background: rgba(40, 40, 40, 0.5);
        border-radius: 16px;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Для светлой темы */
    .light-theme .cafes-screen {
        background: linear-gradient(135deg, #f0f0f0, #e0e0e0);
    }

    .light-theme .cafe-card {
        background: linear-gradient(135deg, #ffffff, #f5f5f5);
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
    }

        .light-theme .cafe-card h3 {
            color: #333;
        }

        .light-theme .cafe-card p {
            color: #666;
        }

    .light-theme .no-photo-placeholder {
        background: linear-gradient(135deg, #e0e0e0, #f0f0f0);
        color: #888;
    }

    .light-theme .no-cafes-message {
        color: #666;
        background: rgba(220, 220, 220, 0.7);
    }
</style>
</head>
<body class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<div class="cafes-screen">
    <h1 class="cafes-title">Кафе и рестораны</h1>

    @if (Cafes.Any())
    {
        <div class="cafes-grid">
            @foreach (var cafe in Cafes)
            {
                <div class="cafe-card">
                        <div class="shop-card-img-container">
                            @if (!string.IsNullOrWhiteSpace(cafe.СсылкаНаМагазин))
                            {
                                var siteUrl = GetFullUrl(cafe.СсылкаНаМагазин);
                                var faviconUrl = $"https://www.google.com/s2/favicons?sz=128&domain_url={siteUrl}";
                                <img src="@faviconUrl"
                                     alt="Логотип сайта"
                                     onerror="this.onerror=null; this.src='/images/placeholder.png';" />
                            }
                            else
                            {
                                <div class="no-photo-placeholder">
                                    Фото отсутствует
                                </div>
                            }
                        </div>

                    <div class="cafe-card-content">
                        <h3>@cafe.Название</h3>
                        <p><strong>Этаж:</strong> @cafe.Этаж</p>

                        @if (!string.IsNullOrWhiteSpace(cafe.СсылкаНаМагазин))
                        {
                                <a href="@GetFullUrl(cafe.СсылкаНаМагазин)" target="_blank" class="cafe-card-link">
                                🍽️ Посмотреть меню
                            </a>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-cafes-message">
            <p>Скоро тут будут кафе и рестораны!</p>
            <p>Мы работаем над этим</p>
        </div>
    }
</div>
</body>
</html>
@code {
    private List<CafeInfo> Cafes = new();

    protected override async Task OnInitializedAsync()
    {
        Cafes = await Db.Помещенияs
            .Where(p => p.IdНазначения == 2) // ID 10 - кафе и рестораны
            .Select(p => new CafeInfo
                {
                    Название = p.Название,
                    Этаж = p.Этаж,
                    Фото = p.Фото,
                    СсылкаНаМагазин = p.СсылкаНаМагазин
                })
            .ToListAsync();
    }

    private string GetFullUrl(string? url)
    {
        url = url?.Trim();

        if (string.IsNullOrWhiteSpace(url))
            return "#";

        return url.StartsWith("http", StringComparison.OrdinalIgnoreCase)
            ? url
            : $"https://{url}";
    }

    private class CafeInfo
    {
        public string Название { get; set; }
        public int Этаж { get; set; }
        public string Фото { get; set; }
        public string? СсылкаНаМагазин { get; set; }
    }
}
