@page "/profile/{UserId:int}"
@using CityCenter.Data
@using Microsoft.EntityFrameworkCore
@using CityCenter.Models
@inject AppDbContext Db
@inject NavigationManager NavigationManager

@inject ThemeService ThemeService
<!DOCTYPE html>
<html lang="ru" class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<head>
<style>
    /* Основные стили */
    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #0a0a0a, #111);
        color: #fff;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        transition: all 0.3s ease;
    }

    .tenant-profile {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 60px 40px;
        color: white;
    }

    .tenant-name {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 40px;
        text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);
    }

    .section-title {
        font-size: 2rem;
        margin: 40px 0 20px 0;
    }

    .grid {
        width: 100%;
        max-width: 1200px;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
    }

    .card {
        background: linear-gradient(135deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
        padding: 30px;
        border-radius: 20px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        font-size: 1.3rem;
        color: #fff;
    }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px #00aaff;
        }

    .btn {
        margin-top: 15px;
        padding: 10px 20px;
        background-color: #00aaff;
        border: none;
        border-radius: 10px;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .btn:hover {
            background-color: #0088cc;
        }

    /* Светлая тема */
    body.light-theme {
        background: linear-gradient(135deg, #f5f7fa, #e4e8eb);
        color: #333;
    }

    .light-theme .tenant-profile {
        color: #333;
    }

    .light-theme .tenant-name {
        text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.2);
        color: #222;
    }

    .light-theme .card {
        background: linear-gradient(135deg, rgba(245, 245, 245, 0.95), rgba(255, 255, 255, 0.95));
        color: #333;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        border: 1px solid #e0e0e0;
    }

        .light-theme .card:hover {
            box-shadow: 0 0 30px rgba(0, 120, 215, 0.3);
        }

    .light-theme .btn {
        background-color: #0078d7;
        color: white;
    }

        .light-theme .btn:hover {
            background-color: #0066cc;
        }

    .light-theme .section-title {
        color: #222;
    }
</style>
</head>
<body class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<div class="tenant-profile">
    <div class="tenant-name">@FullName</div>

    <div class="section-title">Арендованные помещения</div>
    <div class="grid">
        @foreach (var room in RentedRooms)
        {
         
            <div class="card">
                @if (!string.IsNullOrWhiteSpace(room.Фото))
                {
                    <img src="@room.Фото" alt="Фото помещения"
                         style="width: 100%; max-height: 160px; object-fit: cover; border-radius: 10px; margin-bottom: 15px;" />
                }
                else
                {
                    <div style="width: 100%; height: 160px; background: #333; border-radius: 10px; margin-bottom: 15px; display: flex; align-items: center; justify-content: center; color: #aaa;">
                        Фото отсутствует
                    </div>
                }
                @if (!string.IsNullOrWhiteSpace(room.Договор))
                {
                    <a class="btn" href="@room.Договор" target="_blank">📄 Открыть договор</a>
                }

                <p><strong>Название:</strong> @room.Название</p>и
                <p><strong>Этаж:</strong> @room.Этаж</p>
                <p><strong>Площадь:</strong> @room.Площадь м²</p>
                <p><strong>Дата окончания:</strong> @room.ДатаОкончания?.ToShortDateString()</p>
                @if (EditingLinkRoomId == room.ID_Помещения)
                {
                    <input class="form-control" placeholder="Ссылка на магазин" @bind="NewShopUrl" />
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button class="btn" @onclick="() => SaveShopLink(room.ID_Помещения)">💾 Сохранить ссылку</button>
                        <button class="btn" style="background-color: #999;" @onclick="CancelEditLink">✖ Отмена</button>
                    </div>
                }
                else
                {
                    @if (!string.IsNullOrWhiteSpace(room.СсылкаНаМагазин))
                    {
                        <button class="btn" @onclick="() => StartEditLink(room.ID_Помещения)">📝 Изменить ссылку на магазин</button>
                        <a href="@GetFullUrl(room.СсылкаНаМагазин)" class="btn" target="_blank">🌐 Перейти в магазин</a>
                    }
                    else
                    {
                        <button class="btn" @onclick="() => StartEditLink(room.ID_Помещения)">🛍 Добавить ссылку на магазин</button>
                    }


                }

                @if (EditingRoomId == room.ID_Помещения)
                {
                    <InputDate @bind-Value="NewEndDate" class="form-control" />
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button class="btn" @onclick="() => SaveNewEndDate(room.ID_Помещения)">💾 Сохранить</button>
                        <button class="btn" style="background-color: #999;" @onclick="CancelEdit">✖ Отмена</button>
                    </div>
                }
                else
                {
                    <button class="btn" @onclick="() => StartEdit(room.ID_Помещения, room.ДатаОкончания)">Изменить срок окончания</button>
                }


            </div>
        }
    </div>
   

    <div class="section-title">Доступные помещения для аренды</div>
    <div class="grid">
        @foreach (var room in AvailableRooms)
        {
            <div class="card">
                @if (!string.IsNullOrWhiteSpace(room.Фото))
                {
                    <img src="@room.Фото" alt="Фото помещения"
                         style="width: 100%; max-height: 160px; object-fit: cover; border-radius: 10px; margin-bottom: 15px;" />
                }
                else
                {
                    <div style="width: 100%; height: 160px; background: #333; border-radius: 10px; margin-bottom: 15px; display: flex; align-items: center; justify-content: center; color: #aaa;">
                        Фото отсутствует
                    </div>
                }
                <p><strong>Название:</strong> @room.Название</p>
                <p><strong>Этаж:</strong> @room.Этаж</p>
                <p><strong>Площадь:</strong> @room.Площадь м²</p>
                <p><strong>Стоимость аренды:</strong> @room.СтоимостьАренды.ToString("C")</p>
                <button class="btn" @onclick='() => GoToRoomDetails(room.ID_Помещения)'>Арендовать</button>

            </div>
        }
    </div>
    <button class="btn" style="margin-bottom: 20px;" @onclick="GoToMapView">
        🗺 Смотреть на карте
    </button>
</div>
</body>
</html>

@code {
    [Parameter] public int UserId { get; set; }

    private string FullName;
    private List<RoomModel> RentedRooms = new();
    private List<RoomModel> AvailableRooms = new();

    private int? EditingRoomId = null;
    private DateTime? NewEndDate;


    private void GoToMapView()
    {
        NavigationManager.NavigateTo($"/map-rent/?userId={UserId}");
    }



    private void GoToRoomDetails(int roomId)
    {
        NavigationManager.NavigateTo($"/room-details/{roomId}?userId={UserId}");
    }

    private void StartEdit(int roomId, DateTime? currentDate)
    {
        EditingRoomId = roomId;
        NewEndDate = currentDate;
    }

    private void CancelEdit()
    {
        EditingRoomId = null;
        NewEndDate = null;
    }
    private async Task SaveNewEndDate(int roomId)
    {
        if (NewEndDate == null)
            return;

        var арендатор = await Db.Арендаторыs.FirstOrDefaultAsync(a => a.IdПользователя == UserId);
        if (арендатор == null)
            return;

        var аренда = await Db.Арендаs.FirstOrDefaultAsync(a =>
            a.IdАрендатора == арендатор.IdАрендатора &&
            a.IdПомещения == roomId);

        if (аренда != null)
        {
            аренда.ДатаОкончания = NewEndDate.Value;
            аренда.ДатаПоследнегоИзменения = DateTime.Now; // <-- обновляем дату изменения

            await Db.SaveChangesAsync();
            await OnInitializedAsync(); // полностью обновить данные


            // Обновляем отображение
            RentedRooms = await Db.Арендаs
      .Where(a => a.IdАрендатора == арендатор.IdАрендатора && a.IdПомещенияNavigation.ДоступноДляАренды == false)
      .Include(a => a.IdПомещенияNavigation)
      .Select(a => new RoomModel
          {
              ID_Помещения = a.IdПомещения, // ← ОБЯЗАТЕЛЬНО
              Название = a.IdПомещенияNavigation.Название,
              Этаж = a.IdПомещенияNavigation.Этаж,
              Площадь = (int)a.IdПомещенияNavigation.Площадь,
              ДатаОкончания = a.ДатаОкончания,
              Фото = a.IdПомещенияNavigation.Фото
          })
      .ToListAsync();
            Console.WriteLine($"→ Сохраняем дату: {NewEndDate}");
        }

        CancelEdit();
    }


    private string GetFullUrl(string? url)
    {
        url = url?.Trim(); // Убираем пробелы в начале и конце

        if (string.IsNullOrWhiteSpace(url))
            return "#";

        return url.StartsWith("http", StringComparison.OrdinalIgnoreCase)
            ? url
            : $"https://{url}";
    }



    protected override async Task OnInitializedAsync()
    {
        var user = await Db.Пользователиs.FindAsync(UserId);
        FullName = user?.Фио ?? "Арендатор";

        var арендатор = await Db.Арендаторыs.FirstOrDefaultAsync(a => a.IdПользователя == UserId);

        if (арендатор != null)
        {
            RentedRooms = await Db.Арендаs
      .Where(a => a.IdАрендатора == арендатор.IdАрендатора && a.IdПомещенияNavigation.ДоступноДляАренды == false)
      .Include(a => a.IdПомещенияNavigation)
      .Select(a => new RoomModel
          {
              ID_Помещения = a.IdПомещения, // ✅ ОБЯЗАТЕЛЬНО!
              Название = a.IdПомещенияNavigation.Название,
              Этаж = a.IdПомещенияNavigation.Этаж,
              Площадь = (int)a.IdПомещенияNavigation.Площадь,
              ДатаОкончания = a.ДатаОкончания,
              Фото = a.IdПомещенияNavigation.Фото,
              СсылкаНаМагазин = a.IdПомещенияNavigation.СсылкаНаМагазин
          })
      .ToListAsync();

        }

        AvailableRooms = await Db.Помещенияs
     .Where(p => p.ДоступноДляАренды)
     .Select(p => new RoomModel
         {
             ID_Помещения = p.IdПомещения,
             Название = p.Название,
             Этаж = p.Этаж,
             Площадь = (int)p.Площадь,
             СтоимостьАренды = p.СтоимостьАренды,
               Фото = p.Фото
         })
     .ToListAsync();

    }
    private int? EditingLinkRoomId = null;
    private string? NewShopUrl = null;

    private void StartEditLink(int roomId)
    {
        EditingLinkRoomId = roomId;
        var room = RentedRooms.FirstOrDefault(r => r.ID_Помещения == roomId);
        NewShopUrl = room?.СсылкаНаМагазин;
    }

    private void CancelEditLink()
    {
        EditingLinkRoomId = null;
        NewShopUrl = null;
    }

    private async Task SaveShopLink(int roomId)
    {
        if (string.IsNullOrWhiteSpace(NewShopUrl)) return;

        var помещение = await Db.Помещенияs.FindAsync(roomId);
        if (помещение != null)
        {
            помещение.СсылкаНаМагазин = NewShopUrl;
            await Db.SaveChangesAsync();

            var room = RentedRooms.FirstOrDefault(r => r.ID_Помещения == roomId);
            if (room != null)
            {
                room.СсылкаНаМагазин = NewShopUrl;
            }
        }

        CancelEditLink();
    }
    private class RoomModel
    {
        public int ID_Помещения { get; set; }
        public string Название { get; set; }
        public int Этаж { get; set; }
        public int Площадь { get; set; }
        public DateTime? ДатаОкончания { get; set; }
        public decimal СтоимостьАренды { get; set; }
        public string Фото { get; set; } // путь к изображению
        public string? Договор { get; set; }
        public string? СсылкаНаМагазин { get; set; }
    }
}
