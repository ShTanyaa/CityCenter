@page "/login"
@using CityCenter.Data
@using Microsoft.EntityFrameworkCore
@using CityCenter.Models
@using System.Security.Cryptography
@using System.Text
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AppDbContext Db
<style>
    body {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        min-height: 100vh; /* Добавь вместо неё, чтобы сохранялась минимальная высота */
        overflow-x: hidden;
        margin: 0;
        padding: 0;
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #0a0a0a, #1e1e1e);
        background-size: cover;
        color: #fff;
    }


    .hidden {
        display: none !important;
    }


    .welcome-text {
        position: relative; /* Вместо absolute */
        top: auto;
        font-size: 3rem;
        font-weight: bold;
        text-shadow: 4px 4px 10px rgba(0, 0, 0, 0.7);
        max-width: 80%;
        margin-bottom: 30px; /* Добавляем отступ, чтобы текст не сливался с блоками */
    }

    .content {
        display: flex;
        justify-content: center; /* Центрирование блоков */
        flex-wrap: wrap; /* Чтобы блоки красиво располагались на маленьких экранах */
        gap: 20px;
        width: 100%;
        max-width: 1200px;
        padding: 20px;
    }


    .block {
        padding: 30px;
        border-radius: 20px;
        text-align: center;
        font-size: 1.6rem;
        font-weight: 600;
        color: white;
        background: linear-gradient(135deg, rgba(0, 0, 0, 1), rgba(40, 40, 40, 0.6));
        width: 22%;
        min-width: 200px;
        box-sizing: border-box;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
        box-shadow: 0 0 12px rgba(0, 0, 0, 0.8);
    }

        .block:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px #00aaff;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 100, 150, 0.4));
        }



    .sidebar {
        width: 80px;
        height: 100vh;
        background: rgba(0, 0, 0, 0.8);
        position: fixed;
        left: 0;
        top: 0;
        transition: width 0.3s ease;
        overflow: hidden;
        padding-top: 80px;
    }

        .sidebar:hover {
            width: 250px;
        }

        .sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .sidebar ul li {
                padding: 15px;
                color: white;
                display: flex;
                align-items: center;
                cursor: pointer;
                transition: background 0.3s;
            }

                .sidebar ul li:hover {
                    background: rgba(255, 255, 255, 0.2);
                }

                .sidebar ul li i {
                    font-size: 20px;
                    width: 40px;
                    text-align: center;
                }

                .sidebar ul li span {
                    opacity: 0;
                    transition: opacity 0.3s;
                    white-space: nowrap;
                }

        .sidebar:hover ul li span {
            opacity: 1;
        }

    .map-container {
        margin-top: 50px;
        width: 90%;
        max-width: 1400px; /* увеличь при необходимости */
        background: transparent;
        border-radius: 10px;
        overflow: visible; /* ⛔ отключаем прокрутку */
        margin-bottom: 100px; /* чтобы внизу было «пусто» и можно было прокрутить */
    }

        .map-container svg {
            width: 1400px; /* напрямую увеличим размер */
            height: auto;
            transition: transform 0.3s ease;
            transform: none; /* убери масштаб */
        }


    svg a > g {
        cursor: pointer;
        transition: transform 0.3s ease, filter 0.3s ease;
        transform-origin: center;
    }

        svg a > g:hover {
            transform: scale(1.05);
            filter: drop-shadow(0 0 10px #00aaff);
        }


    svg [id^="store-"] rect {
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease, fill 0.3s ease;
        rx: 8;
        ry: 8;
    }

    svg [id^="store-"]:hover rect {
        fill: rgba(0, 170, 255, 0.5);
        transform: scale(1.05);
        filter: drop-shadow(0 0 10px #00aaff);
    }


    [id^="store-"]:active {
        fill: #0088cc;
    }

    .screen {
        padding-top: 80px; /* или больше, если нужно */
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start; /* было center — это центрировало всё по вертикали */
        padding-left: 100px;
        padding-right: 40px;
        box-sizing: border-box;
    }




    .back-button.top-left {
        position: absolute;
        top: 30px;
        left: 30px;
        background: transparent;
        border: none;
        color: white;
        text-decoration: underline;
        font-size: 1rem;
        cursor: pointer;
        z-index: 1000;
    }

    .login-screen {
        position: fixed;
        inset: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(8px);
        z-index: 999;
        animation: fadeIn 0.5s ease-out;
    }

    /* @@keyframes fadeIn {
                from { opacity: 0; transform: scale(0.95); }
                to { opacity: 1; transform: scale(1); }
            } */


    .login-box {
        position: relative;
        background: linear-gradient(135deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
        padding: 100px 120px;
        border-radius: 24px;
        box-shadow: 0 0 40px rgba(0, 0, 0, 0.8);
        min-width: 600px;
        max-width: 700px;
        width: 100%;
        color: #fff;
        font-size: 1.4rem;
        transition: transform 0.3s ease;
    }

        .login-box h2 {
            margin-bottom: 30px;
            font-size: 2.8rem;
            font-weight: 600;
        }

    .login-input {
        display: block;
        margin: 18px auto;
        padding: 22px;
        width: 100%;
        border: none;
        border-radius: 10px;
        font-size: 1.3rem;
        font-family: 'Poppins', sans-serif;
        background-color: #1e1e1e;
        color: #fff;
        transition: box-shadow 0.3s ease;
    }

        .login-input:focus {
            outline: none;
            box-shadow: 0 0 10px #00aaff;
        }

    .login-button {
        background: #00aaff;
        color: white;
        border: none;
        padding: 20px 40px;
        margin-top: 25px;
        border-radius: 14px;
        cursor: pointer;
        font-weight: bold;
        font-size: 1.4rem;
        width: 100%;
        transition: background 0.3s ease;
    }

        .login-button:hover {
            background: #0088cc;
        }

    .back-button {
        background: transparent;
        border: none;
        color: white;
        margin-top: 15px;
        text-decoration: underline;
        cursor: pointer;
    }

        .back-button.inside {
            position: absolute;
            top: 25px;
            left: 25px;
            background: transparent;
            border: none;
            color: #ccc;
            text-decoration: underline;
            font-size: 1.2rem;
            cursor: pointer;
            transition: color 0.3s ease;
        }

            .back-button.inside:hover {
                color: #fff;
            }

    .login-links {
        margin-top: 25px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .login-link {
        color: #aaa;
        font-size: 1.2rem;
        text-decoration: underline;
        cursor: pointer;
        transition: color 0.3s;
    }

        .login-link:hover {
            color: #fff;
        }


    .scroll-down {
        margin-top: 40px;
        cursor: pointer;
        animation: bounce 2s infinite;
        font-size: 2.5rem;
        color: #00aaff;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(10px);
        }

        60% {
            transform: translateY(5px);
        }
    }

</style>
<div class="login-screen">
    <div class="login-box">
        <button class="back-button inside" @onclick="GoHome">← Назад</button>

        <h2>Вход в систему</h2>

        @if (!string.IsNullOrWhiteSpace(Message))
        {
            <p style="color:@(IsError ? "red" : "green")">@Message</p>
        }

        <input type="text" placeholder="Email" class="login-input" @bind="Email" />
        <input type="password" placeholder="Пароль" class="login-input" @bind="Password" />
        <button class="login-button" @onclick="HandleLogin">Войти</button>

        <div class="login-links">
            <a class="login-link">Забыли пароль?</a>
            <a class="login-link" href="/registration">Ещё нет аккаунта? Зарегистрироваться</a>
        </div>
    </div>
</div>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool IsError { get; set; } = false;

    private async Task HandleLogin()
    {
        var user = await Db.Пользователиs.FirstOrDefaultAsync(u => u.Email == Email);

        if (user == null || user.Пароль != HashPassword(Password))
        {
            Message = "Неверный логин или пароль";
            IsError = true;
            return;
        }

        // Навигация по ролям
        if (user.IdРоли == 2) // Обычный пользователь
        {
            Navigation.NavigateTo($"/profile/{user.IdПользователя}");
        }
        else if (user.IdРоли == 1) // Админ
        {
            Navigation.NavigateTo("/admin-dashboard");
        }
        else
        {
            Message = "Неизвестная роль пользователя";
            IsError = true;
        }
    }

    private string HashPassword(string password)
    {
        using var sha256 = SHA256.Create();
        var bytes = Encoding.UTF8.GetBytes(password);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToHexString(hash).ToLower();
    }

    private async Task GoHome()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
