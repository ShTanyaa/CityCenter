@page "/submit-payment/{roomId:int}/{userId:int}"
@using CityCenter.Data
@using CityCenter.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Env
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JSRuntime
@inject ThemeService ThemeService
<!DOCTYPE html>
<html lang="ru" class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<head>
<style>
    /* Основные стили (тёмная тема по умолчанию) */
    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #0a0a0a, #111);
        color: #fff;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        transition: all 0.3s ease;
    }

    .back-arrow {
        position: absolute;
        top: 30px;
        left: 30px;
        font-size: 2rem;
        cursor: pointer;
        color: #00aaff;
        transition: transform 0.2s ease;
        z-index: 10;
    }

        .back-arrow:hover {
            transform: scale(1.2);
            color: #0088cc;
        }

    .submit-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 60px 40px;
    }

    .card {
        background: linear-gradient(135deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
        padding: 30px;
        border-radius: 20px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
        max-width: 800px;
        width: 100%;
        margin-bottom: 30px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        font-size: 1.2rem;
    }

        .card:hover {
            transform: scale(1.02);
            box-shadow: 0 0 30px #00aaff;
        }

    .form-control {
        width: 100%;
        padding: 14px;
        font-size: 1rem;
        border-radius: 10px;
        border: none;
        background-color: #1e1e1e;
        color: white;
        margin-top: 15px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            box-shadow: 0 0 10px #00aaff;
        }

    .btn {
        padding: 12px 24px;
        font-size: 1.1rem;
        border: none;
        border-radius: 10px;
        background-color: #00aaff;
        color: white;
        cursor: pointer;
        transition: background 0.3s ease, transform 0.3s ease;
    }

        .btn:hover {
            background-color: #0088cc;
            transform: scale(1.03);
        }

    h2 {
        font-size: 2.5rem;
        margin-bottom: 30px;
        text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);
    }

    .preview {
        max-width: 300px;
        border-radius: 10px;
        margin-top: 15px;
    }

    .message {
        color: lightgreen;
        margin-top: 15px;
        font-size: 1rem;
    }

    select.form-control {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 20px;
    }

    /* Светлая тема */
    body.light-theme {
        background: linear-gradient(135deg, #f5f7fa, #e4e8eb);
        color: #333;
    }

    .light-theme .back-arrow {
        color: #0078d7;
    }

        .light-theme .back-arrow:hover {
            color: #005fa3;
        }

    .light-theme .card {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(245, 245, 245, 0.95));
        color: #333;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        border: 1px solid #e0e0e0;
    }

        .light-theme .card:hover {
            box-shadow: 0 0 30px rgba(0, 120, 215, 0.3);
        }

    .light-theme .form-control {
        background-color: #fff;
        color: #333;
        border: 1px solid #ddd;
    }

        .light-theme .form-control:focus {
            box-shadow: 0 0 10px rgba(0, 120, 215, 0.5);
        }

    .light-theme .btn {
        background-color: #0078d7;
        color: white;
    }

        .light-theme .btn:hover {
            background-color: #0066cc;
        }

    .light-theme h2 {
        color: #222;
        text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.1);
    }

    .light-theme select.form-control {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23333'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    }

    .light-theme .message {
        color: #28a745;
    }
</style>
</head>
<body class="@(ThemeService.IsLightTheme ? "light-theme" : "")">
<div class="submit-container">
    <div class="back-arrow" @onclick="GoBack">←</div>
    <h2>Создание заявки</h2>

    @if (room == null)
    {
        <p>Загрузка информации...</p>
    }
    else
    {
        <div class="card">
            <p><strong>Название:</strong> @room.Название</p>
            <p><strong>Этаж:</strong> @room.Этаж</p>
            <p><strong>Площадь:</strong> @room.Площадь м²</p>
                <p><strong>Стоимость аренды:</strong> @room.СтоимостьАренды.ToString("N0") руб/мес</p>
        </div>

        <div class="card">
                <InputFile OnChange="HandleFileUpload" accept=".jpg,.jpeg,.png,.pdf,.doc,.docx" />

                @if (!string.IsNullOrEmpty(ImagePreview) && UploadedFile?.ContentType.StartsWith("image/") == true)
                {
                    <img src="@ImagePreview" class="preview" />
                }


            <select class="form-control" @bind="IdДеятельности">
                <option value="">-- Выберите вид деятельности --</option>
                @foreach (var activity in Activities)
                {
                    <option value="@activity.IdДеятельности">@activity.Название</option>
                }
            </select>

            <input class="form-control" type="date" @bind="ДатаНачала" />
            <input class="form-control" type="date" @bind="ДатаОкончания" />

            <textarea class="form-control" rows="3" placeholder="Комментарий к оплате" @bind="Комментарий"></textarea>
            <button class="btn" @onclick="SubmitApplication">📤 Отправить заявку</button>

            @if (!string.IsNullOrEmpty(Message))
            {
                <p class="message">@Message</p>
            }
        </div>
    }
</div>
</body>
</html>

@code {
    [Parameter] public int roomId { get; set; }
    [Parameter] public int userId { get; set; }

    private int? IdДеятельности;
    private DateTime ДатаНачала = DateTime.Today;
    private DateTime ДатаОкончания = DateTime.Today.AddMonths(1);
    private List<ВидДеятельности> Activities = new();

    private Помещения? room;
    private IBrowserFile? UploadedFile;
    private string? ImagePreview;
    private string? Комментарий;
    private string? Message;

    protected override async Task OnInitializedAsync()
    {
        room = await Db.Помещенияs.FindAsync(roomId);
        Activities = await Db.ВидДеятельностиs.ToListAsync();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;

        // Если изображение — делаем превью
        if (UploadedFile.ContentType.StartsWith("image/"))
        {
            using var stream = UploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var buffer = new byte[UploadedFile.Size];
            await stream.ReadAsync(buffer);
            ImagePreview = $"data:{UploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            ImagePreview = null;
        }
    }


    private async Task SubmitApplication()
    {
        try
        {
            if (UploadedFile == null || userId == 0 || !IdДеятельности.HasValue)
            {
                Message = "❗ Заполните все поля и загрузите скрин оплаты.";
                return;
            }

            // Сохраняем файл
            var fileName = Guid.NewGuid() + Path.GetExtension(UploadedFile.Name);
            var savePath = Path.Combine(Env.WebRootPath, "uploads", fileName);
            Directory.CreateDirectory(Path.GetDirectoryName(savePath)!);

            await using var fs = new FileStream(savePath, FileMode.Create);
            await UploadedFile.OpenReadStream().CopyToAsync(fs);

            // Находим арендатора
            var арендатор = await Db.Арендаторыs.FirstOrDefaultAsync(a => a.IdПользователя == userId);
            if (арендатор == null)
            {
                Message = $"❗ Ошибка: арендатор не найден.";
                return;
            }

            // Получаем название выбранного вида деятельности
            var selectedActivity = Activities.FirstOrDefault(a => a.IdДеятельности == IdДеятельности);
            if (selectedActivity == null)
            {
                Message = "❗ Выбранный вид деятельности не найден";
                return;
            }

            // Сохраняем заявку
            var заявка = new ЗаявкаНаАренду
                {
                    ID_Пользователя = userId,
                    ID_Помещения = roomId,
                    ДатаЗаявки = DateTime.Now,
                    ФотоОплаты = "/uploads/" + fileName,
                    Комментарий = $"Вид деятельности: {selectedActivity.Название}\n{Комментарий ?? ""}",
                    Статус = "В обработке"
                };

            Db.ЗаявкиНаАренду.Add(заявка);
            await Db.SaveChangesAsync();

            Message = "✅ Заявка успешно отправлена на рассмотрение! После подтверждения администратором помещение будет добавлено в ваш список арендованных.";
        }
        catch (Exception ex)
        {
            var inner = ex.InnerException?.Message ?? ex.Message;
            Message = $"❗ Ошибка: {inner}";
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}